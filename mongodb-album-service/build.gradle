plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.5.1"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

dependencies {
    //spec
    implementation("jakarta.annotation:jakarta.annotation-api:2.1.1")
	implementation("jakarta.validation:jakarta.validation-api:3.0.2")

    //micronaut
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
	implementation("io.micronaut.reactor:micronaut-reactor")
    // data mongodb
    implementation("io.micronaut.data:micronaut-data-mongodb")
    implementation("org.mongodb:mongodb-driver-reactivestreams")
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    implementation("net.bytebuddy:byte-buddy:1.17.4")


    // yaml support
    runtimeOnly("org.yaml:snakeyaml")

    //logging
    runtimeOnly("ch.qos.logback:logback-classic")

    //lombok
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

    //annotation processor
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.data:micronaut-data-document-processor")

    // reactor test
    testImplementation("io.projectreactor:reactor-test:3.7.3")

    // test containers
    testImplementation("org.testcontainers:mongodb")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")
    // mock failed
    testImplementation("org.objenesis:objenesis:3.4")

    // http client/reactor httpClient
	testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.reactor:micronaut-reactor-http-client")
}


application {
    mainClass.set("com.example.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

// see: https://stackoverflow.com/questions/9356543/logging-while-testing-through-gradle/35457740#s
// see: https://github.com/micronaut-projects/micronaut-core/discussions/8772
test {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events "failed", "skipped", "passed"
        exceptionFormat "full"
        showStandardStreams true
        // set options for log level DEBUG
//        debug {
//            events "started", "skipped", "failed"
//            exceptionFormat "full"
//        }
//
//        // remove standard output/error logging from --info builds
//        // by assigning only 'failed' and 'skipped' events
//        info.events = ["failed", "skipped"]

    }
    //https://pastebin.com/PX8e1EKv

//    onOutput { desc, event ->
//        switch (event.destination) {
//            case TestOutputEvent.Destination.StdOut:
//                println event.message
//                break
//            case TestOutputEvent.Destination.StdErr:
//                System.err.println event.message
//                break
//        }
//    }
}
