plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "3.0.1"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

dependencies {
    //spec
    implementation("javax.annotation:javax.annotation-api")

    //micronaut
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.micronaut.mongodb:micronaut-mongo-reactive")

    //logging
    runtimeOnly("ch.qos.logback:logback-classic")

    //lombok
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    //apt
    annotationProcessor("io.micronaut:micronaut-http-validation")

    // reactor test
    testImplementation("io.projectreactor:reactor-test:3.4.12")
    //test
    testImplementation("org.testcontainers:mongodb")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")
}


application {
    mainClass.set("com.example.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

// see: https://stackoverflow.com/questions/9356543/logging-while-testing-through-gradle/35457740#s
test {
    testLogging {
        // set options for log level LIFECYCLE
        events "failed", "skipped", "passed"
        exceptionFormat "full"
        showStandardStreams true
        // set options for log level DEBUG
//        debug {
//            events "started", "skipped", "failed"
//            exceptionFormat "full"
//        }
//
//        // remove standard output/error logging from --info builds
//        // by assigning only 'failed' and 'skipped' events
//        info.events = ["failed", "skipped"]

    }
    //https://pastebin.com/PX8e1EKv

//    onOutput { desc, event ->
//        switch (event.destination) {
//            case TestOutputEvent.Destination.StdOut:
//                println event.message
//                break
//            case TestOutputEvent.Destination.StdErr:
//                System.err.println event.message
//                break
//        }
//    }
}

